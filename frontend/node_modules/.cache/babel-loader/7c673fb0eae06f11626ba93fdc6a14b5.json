{"ast":null,"code":"import customFetch, { checkForUnauthorizedResponse } from '../../utils/axios';\nimport { clearAllJobsState } from '../allJobs/allJobsSlice';\nimport { clearValues } from '../job/jobSlice';\nimport { logoutUser } from './userSlice';\nexport const registerUserThunk = async (url, user, thunkAPI) => {\n  try {\n    const resp = await customFetch.post(url, user);\n    return resp.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data.msg);\n  }\n};\nexport const loginUserThunk = async (url, user, thunkAPI) => {\n  console.log('URL:', url);\n  console.log('User Payload:', user);\n\n  try {\n    const resp = await customFetch.post(url, user);\n    console.log('Response:', resp.data);\n    return resp.data;\n  } catch (error) {\n    console.error('Error:', error.response.data.msg);\n    return thunkAPI.rejectWithValue(error.response.data.msg);\n  }\n};\nexport const updateUserThunk = async (url, user, thunkAPI) => {\n  try {\n    const resp = await customFetch.patch(url, user);\n    return resp.data;\n  } catch (error) {\n    return checkForUnauthorizedResponse(error, thunkAPI);\n  }\n};\nexport const clearStoreThunk = async (message, thunkAPI) => {\n  try {\n    thunkAPI.dispatch(logoutUser(message));\n    thunkAPI.dispatch(clearAllJobsState());\n    thunkAPI.dispatch(clearValues());\n    return Promise.resolve();\n  } catch (error) {\n    return Promise.reject();\n  }\n};","map":{"version":3,"sources":["C:/Users/pvayu/OneDrive/Documents/Code/TexasInterns/frontend/src/features/user/userThunk.js"],"names":["customFetch","checkForUnauthorizedResponse","clearAllJobsState","clearValues","logoutUser","registerUserThunk","url","user","thunkAPI","resp","post","data","error","rejectWithValue","response","msg","loginUserThunk","console","log","updateUserThunk","patch","clearStoreThunk","message","dispatch","Promise","resolve","reject"],"mappings":"AAAA,OAAOA,WAAP,IAAsBC,4BAAtB,QAA0D,mBAA1D;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAO,MAAMC,iBAAiB,GAAG,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,QAAlB,KAA+B;AAC9D,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMT,WAAW,CAACU,IAAZ,CAAiBJ,GAAjB,EAAsBC,IAAtB,CAAnB;AACA,WAAOE,IAAI,CAACE,IAAZ;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,WAAOJ,QAAQ,CAACK,eAAT,CAAyBD,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,GAA7C,CAAP;AACD;AACF,CAPM;AASP,OAAO,MAAMC,cAAc,GAAG,OAAOV,GAAP,EAAYC,IAAZ,EAAkBC,QAAlB,KAA+B;AAC3DS,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBZ,GAApB;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BX,IAA7B;;AACA,MAAI;AACF,UAAME,IAAI,GAAG,MAAMT,WAAW,CAACU,IAAZ,CAAiBJ,GAAjB,EAAsBC,IAAtB,CAAnB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBT,IAAI,CAACE,IAA9B;AACA,WAAOF,IAAI,CAACE,IAAZ;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdK,IAAAA,OAAO,CAACL,KAAR,CAAc,QAAd,EAAwBA,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,GAA5C;AACA,WAAOP,QAAQ,CAACK,eAAT,CAAyBD,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,GAA7C,CAAP;AACD;AACF,CAXM;AAaP,OAAO,MAAMI,eAAe,GAAG,OAAOb,GAAP,EAAYC,IAAZ,EAAkBC,QAAlB,KAA+B;AAC5D,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMT,WAAW,CAACoB,KAAZ,CAAkBd,GAAlB,EAAuBC,IAAvB,CAAnB;AACA,WAAOE,IAAI,CAACE,IAAZ;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,WAAOX,4BAA4B,CAACW,KAAD,EAAQJ,QAAR,CAAnC;AACD;AACF,CAPM;AASP,OAAO,MAAMa,eAAe,GAAG,OAAOC,OAAP,EAAgBd,QAAhB,KAA6B;AAC1D,MAAI;AACFA,IAAAA,QAAQ,CAACe,QAAT,CAAkBnB,UAAU,CAACkB,OAAD,CAA5B;AACAd,IAAAA,QAAQ,CAACe,QAAT,CAAkBrB,iBAAiB,EAAnC;AACAM,IAAAA,QAAQ,CAACe,QAAT,CAAkBpB,WAAW,EAA7B;AACA,WAAOqB,OAAO,CAACC,OAAR,EAAP;AACD,GALD,CAKE,OAAOb,KAAP,EAAc;AACd,WAAOY,OAAO,CAACE,MAAR,EAAP;AACD;AACF,CATM","sourcesContent":["import customFetch, { checkForUnauthorizedResponse } from '../../utils/axios';\nimport { clearAllJobsState } from '../allJobs/allJobsSlice';\nimport { clearValues } from '../job/jobSlice';\nimport { logoutUser } from './userSlice';\nexport const registerUserThunk = async (url, user, thunkAPI) => {\n  try {\n    const resp = await customFetch.post(url, user);\n    return resp.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data.msg);\n  }\n};\n\nexport const loginUserThunk = async (url, user, thunkAPI) => {\n  console.log('URL:', url); \n  console.log('User Payload:', user);  \n  try {\n    const resp = await customFetch.post(url, user);\n    console.log('Response:', resp.data);  \n    return resp.data;\n  } catch (error) {\n    console.error('Error:', error.response.data.msg);  \n    return thunkAPI.rejectWithValue(error.response.data.msg);\n  }\n};\n\nexport const updateUserThunk = async (url, user, thunkAPI) => {\n  try {\n    const resp = await customFetch.patch(url, user);\n    return resp.data;\n  } catch (error) {\n    return checkForUnauthorizedResponse(error, thunkAPI);\n  }\n};\n\nexport const clearStoreThunk = async (message, thunkAPI) => {\n  try {\n    thunkAPI.dispatch(logoutUser(message));\n    thunkAPI.dispatch(clearAllJobsState());\n    thunkAPI.dispatch(clearValues());\n    return Promise.resolve();\n  } catch (error) {\n    return Promise.reject();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}