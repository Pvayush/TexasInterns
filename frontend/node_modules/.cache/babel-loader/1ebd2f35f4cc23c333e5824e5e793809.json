{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { getAllJobsThunk } from './allJobsThunk';\nimport customFetch from '../../utils/axios'; // Make sure this path is correct and `axios` is set up properly.\n\nconst initialFiltersState = {\n  search: '',\n  searchStatus: 'all',\n  searchType: 'all',\n  sort: 'latest',\n  sortOptions: ['latest', 'oldest', 'a-z', 'z-a']\n};\nconst initialState = {\n  isLoading: true,\n  jobs: [],\n  totalJobs: 0,\n  numOfPages: 1,\n  page: 1,\n  stats: {},\n  monthlyApplications: [],\n  ...initialFiltersState\n}; // Thunks for fetching jobs\n\nexport const getAllJobs = createAsyncThunk('allJobs/getJobs', getAllJobsThunk); // Thunk for showing statistics with demo user check\n\nexport const showStats = createAsyncThunk('allJobs/showStats', async (_, thunkAPI) => {\n  const {\n    user\n  } = thunkAPI.getState().user; // Check if the current user is a demo user\n\n  if (user.email === 'demoUser@test.com') {\n    // Return mock data for the demo user\n    return {\n      defaultStats: {\n        pending: 2,\n        interview: 3,\n        declined: 1\n      },\n      monthlyApplications: [{\n        date: '2024-01',\n        count: 2\n      }, {\n        date: '2024-02',\n        count: 3\n      }, {\n        date: '2024-03',\n        count: 1\n      }]\n    };\n  } // Proceed with the API call for regular users\n\n\n  try {\n    const resp = await customFetch.get('/jobs/stats');\n    return resp.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue('There was an error fetching stats');\n  }\n});\nconst allJobsSlice = createSlice({\n  name: 'allJobs',\n  initialState,\n  reducers: {\n    showLoading: state => {\n      state.isLoading = true;\n    },\n    hideLoading: state => {\n      state.isLoading = false;\n    },\n    handleChange: (state, _ref) => {\n      let {\n        payload: {\n          name,\n          value\n        }\n      } = _ref;\n      state.page = 1; // Reset to the first page when filters change\n\n      state[name] = value;\n    },\n    clearFilters: state => {\n      return { ...state,\n        ...initialFiltersState\n      };\n    },\n    changePage: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.page = payload;\n    },\n    clearAllJobsState: state => initialState\n  },\n  extraReducers: {\n    [getAllJobs.pending]: state => {\n      state.isLoading = true;\n    },\n    [getAllJobs.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.isLoading = false;\n      state.jobs = payload.jobs; // Update jobs list\n\n      state.numOfPages = payload.numOfPages; // Total number of pages\n\n      state.totalJobs = payload.totalJobs; // Total number of jobs\n    },\n    [getAllJobs.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.isLoading = false;\n      toast.error(payload); // Show error message\n    },\n    [showStats.pending]: state => {\n      state.isLoading = true;\n    },\n    [showStats.fulfilled]: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.isLoading = false;\n      state.stats = payload.defaultStats; // Update stats\n\n      state.monthlyApplications = payload.monthlyApplications; // Update monthly applications\n    },\n    [showStats.rejected]: (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.isLoading = false;\n      toast.error(payload); // Show error message\n    }\n  }\n});\nexport const {\n  showLoading,\n  hideLoading,\n  handleChange,\n  clearFilters,\n  changePage,\n  clearAllJobsState\n} = allJobsSlice.actions;\nexport default allJobsSlice.reducer;","map":{"version":3,"sources":["C:/Users/pvayu/OneDrive/Documents/Code/TexasInterns/frontend/src/features/allJobs/allJobsSlice.js"],"names":["createSlice","createAsyncThunk","toast","getAllJobsThunk","customFetch","initialFiltersState","search","searchStatus","searchType","sort","sortOptions","initialState","isLoading","jobs","totalJobs","numOfPages","page","stats","monthlyApplications","getAllJobs","showStats","_","thunkAPI","user","getState","email","defaultStats","pending","interview","declined","date","count","resp","get","data","error","rejectWithValue","allJobsSlice","name","reducers","showLoading","state","hideLoading","handleChange","payload","value","clearFilters","changePage","clearAllJobsState","extraReducers","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { getAllJobsThunk } from './allJobsThunk';\nimport customFetch from '../../utils/axios'; // Make sure this path is correct and `axios` is set up properly.\n\nconst initialFiltersState = {\n  search: '',\n  searchStatus: 'all',\n  searchType: 'all',\n  sort: 'latest',\n  sortOptions: ['latest', 'oldest', 'a-z', 'z-a'],\n};\n\nconst initialState = {\n  isLoading: true,\n  jobs: [],\n  totalJobs: 0,\n  numOfPages: 1,\n  page: 1,\n  stats: {},\n  monthlyApplications: [], \n  ...initialFiltersState,\n};\n\n// Thunks for fetching jobs\nexport const getAllJobs = createAsyncThunk('allJobs/getJobs', getAllJobsThunk);\n\n// Thunk for showing statistics with demo user check\nexport const showStats = createAsyncThunk('allJobs/showStats', async (_, thunkAPI) => {\n  const { user } = thunkAPI.getState().user;\n\n  // Check if the current user is a demo user\n  if (user.email === 'demoUser@test.com') {\n    // Return mock data for the demo user\n    return {\n      defaultStats: {\n        pending: 2,\n        interview: 3,\n        declined: 1,\n      },\n      monthlyApplications: [\n        { date: '2024-01', count: 2 },\n        { date: '2024-02', count: 3 },\n        { date: '2024-03', count: 1 },\n      ],\n    };\n  }\n\n  // Proceed with the API call for regular users\n  try {\n    const resp = await customFetch.get('/jobs/stats');\n    return resp.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue('There was an error fetching stats');\n  }\n});\n\nconst allJobsSlice = createSlice({\n  name: 'allJobs',\n  initialState,\n  reducers: {\n    showLoading: (state) => {\n      state.isLoading = true;\n    },\n    hideLoading: (state) => {\n      state.isLoading = false;\n    },\n    handleChange: (state, { payload: { name, value } }) => {\n      state.page = 1; // Reset to the first page when filters change\n      state[name] = value;\n    },\n    clearFilters: (state) => {\n      return { ...state, ...initialFiltersState };\n    },\n    changePage: (state, { payload }) => {\n      state.page = payload;\n    },\n    clearAllJobsState: (state) => initialState,\n  },\n  extraReducers: {\n    [getAllJobs.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [getAllJobs.fulfilled]: (state, { payload }) => {\n      state.isLoading = false;\n      state.jobs = payload.jobs; // Update jobs list\n      state.numOfPages = payload.numOfPages; // Total number of pages\n      state.totalJobs = payload.totalJobs; // Total number of jobs\n    },\n    [getAllJobs.rejected]: (state, { payload }) => {\n      state.isLoading = false;\n      toast.error(payload); // Show error message\n    },\n    [showStats.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [showStats.fulfilled]: (state, { payload }) => {\n      state.isLoading = false;\n      state.stats = payload.defaultStats; // Update stats\n      state.monthlyApplications = payload.monthlyApplications; // Update monthly applications\n    },\n    [showStats.rejected]: (state, { payload }) => {\n      state.isLoading = false;\n      toast.error(payload); // Show error message\n    },\n  },\n});\n\nexport const {\n  showLoading,\n  hideLoading,\n  handleChange,\n  clearFilters,\n  changePage,\n  clearAllJobsState,\n} = allJobsSlice.actions;\n\nexport default allJobsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}