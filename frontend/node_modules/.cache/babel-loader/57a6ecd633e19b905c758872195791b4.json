{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { getUserFromLocalStorage } from '../../utils/localStorage';\nimport { createJobThunk, deleteJobThunk, editJobThunk } from './jobThunk';\nconst initialState = {\n  isLoading: false,\n  position: '',\n  company: '',\n  jobLocation: '',\n  jobTypeOptions: ['full-time', 'part-time', 'remote', 'internship'],\n  jobType: 'full-time',\n  statusOptions: ['interview', 'declined', 'pending'],\n  status: 'pending',\n  isEditing: false,\n  editJobId: ''\n};\nexport const createJob = createAsyncThunk('job/createJob', createJobThunk);\nexport const deleteJob = createAsyncThunk('job/deleteJob', deleteJobThunk);\nexport const editJob = createAsyncThunk('job/editJob', editJobThunk);\nconst jobSlice = createSlice({\n  name: 'job',\n  initialState,\n  reducers: {\n    handleChange: (state, _ref) => {\n      let {\n        payload: {\n          name,\n          value\n        }\n      } = _ref;\n      state[name] = value;\n    },\n    clearValues: () => {\n      var _getUserFromLocalStor;\n\n      return { ...initialState,\n        jobLocation: ((_getUserFromLocalStor = getUserFromLocalStorage()) === null || _getUserFromLocalStor === void 0 ? void 0 : _getUserFromLocalStor.location) || ''\n      };\n    },\n    setEditJob: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return { ...state,\n        isEditing: true,\n        ...payload\n      };\n    }\n  },\n  extraReducers: {\n    [createJob.pending]: state => {\n      state.isLoading = true;\n    },\n    [createJob.fulfilled]: state => {\n      state.isLoading = false;\n      toast.success('Job Created');\n    },\n    [createJob.rejected]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.isLoading = false;\n      toast.error(payload);\n    },\n    [deleteJob.fulfilled]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      toast.success(payload);\n    },\n    [deleteJob.rejected]: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      toast.error(payload);\n    },\n    [editJob.pending]: state => {\n      state.isLoading = true;\n    },\n    [editJob.fulfilled]: state => {\n      state.isLoading = false;\n      toast.success('Job Modified...');\n    },\n    [editJob.rejected]: (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.isLoading = false;\n      toast.error(payload);\n    }\n  }\n});\nexport const {\n  handleChange,\n  clearValues,\n  setEditJob\n} = jobSlice.actions;\nexport default jobSlice.reducer;","map":{"version":3,"sources":["C:/Users/pvayu/OneDrive/Documents/Code/TexasInterns/frontend/src/features/job/jobSlice.js"],"names":["createSlice","createAsyncThunk","toast","getUserFromLocalStorage","createJobThunk","deleteJobThunk","editJobThunk","initialState","isLoading","position","company","jobLocation","jobTypeOptions","jobType","statusOptions","status","isEditing","editJobId","createJob","deleteJob","editJob","jobSlice","name","reducers","handleChange","state","payload","value","clearValues","location","setEditJob","extraReducers","pending","fulfilled","success","rejected","error","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { getUserFromLocalStorage } from '../../utils/localStorage';\nimport { createJobThunk, deleteJobThunk, editJobThunk } from './jobThunk';\nconst initialState = {\n  isLoading: false,\n  position: '',\n  company: '',\n  jobLocation: '',\n  jobTypeOptions: ['full-time', 'part-time', 'remote', 'internship'],\n  jobType: 'full-time',\n  statusOptions: ['interview', 'declined', 'pending'],\n  status: 'pending',\n  isEditing: false,\n  editJobId: '',\n};\n\nexport const createJob = createAsyncThunk('job/createJob', createJobThunk);\n\nexport const deleteJob = createAsyncThunk('job/deleteJob', deleteJobThunk);\n\nexport const editJob = createAsyncThunk('job/editJob', editJobThunk);\n\nconst jobSlice = createSlice({\n  name: 'job',\n  initialState,\n  reducers: {\n    handleChange: (state, { payload: { name, value } }) => {\n      state[name] = value;\n    },\n    clearValues: () => {\n      return {\n        ...initialState,\n        jobLocation: getUserFromLocalStorage()?.location || '',\n      };\n    },\n    setEditJob: (state, { payload }) => {\n      return { ...state, isEditing: true, ...payload };\n    },\n  },\n  extraReducers: {\n    [createJob.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [createJob.fulfilled]: (state) => {\n      state.isLoading = false;\n      toast.success('Job Created');\n    },\n    [createJob.rejected]: (state, { payload }) => {\n      state.isLoading = false;\n      toast.error(payload);\n    },\n    [deleteJob.fulfilled]: (state, { payload }) => {\n      toast.success(payload);\n    },\n    [deleteJob.rejected]: (state, { payload }) => {\n      toast.error(payload);\n    },\n    [editJob.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [editJob.fulfilled]: (state) => {\n      state.isLoading = false;\n      toast.success('Job Modified...');\n    },\n    [editJob.rejected]: (state, { payload }) => {\n      state.isLoading = false;\n      toast.error(payload);\n    },\n  },\n});\n\nexport const { handleChange, clearValues, setEditJob } = jobSlice.actions;\n\nexport default jobSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}